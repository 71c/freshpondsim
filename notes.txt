around fresh pond:
2.46 miles around including around kingsley park
2.27 miles around not including around kingsley park
(measured with google maps)




Notes about edge cases for FreshPondPedestrian.__init__

if this is the case then complain:
travel_distance / abs(velocity) == 0
travel_distance >= 0, abs(velocity) >= 0

travel_distance / abs(velocity) == 0

if travel_distance == abs(velocity) == 0
travel no distance and do not move
time taken can be anything!
but minimum possible time taken would be 0

if travel_distance == 0 and abs(velocity) != 0
travel no distance (and do not move because travel no distance)
travel time can be anything!
but minimum possible time taken would be 0

if travel_distance != 0 and abs(velocity) == 0
travel some distance and do not move
impossible! (or infinite time to get there)

if travel_distance != 0 and abs(velocity) != 0
normal


i found this cool web-page
https://stackoverflow.com/questions/7423744/how-should-i-perform-imports-in-a-python-module-without-polluting-its-namespace#7424390


https://math.stackexchange.com/questions/642021/expected-value-as-integral-of-survival-function




generate X, V
T = X / V

cov(X, V) = E[X V] - E[X] E[V]
          = E[X] E[V] - E[X] E[V]
          = 0

cov(X, T) = E[X T] - E[X] E[T]
          = E[X X/V] - E[X] E[X/V]
          = E[X^2] E[1/V] - E[X] E[X] E[1/V]
          = (E[X^2] - E[X]^2) E[1/V]
          = Var(X) E[1/V]

cov(T, V) = E[T V] - E[T] E[V]
          = E[X / V * V] - E[X / V] E[V]
          = E[X] - E[X] E[1/V] E[V]
          = (1 - E[1/V] E[V]) E[X]


Let X ~ LogNormalDistribution[µx, σx]
Let V ~ LogNormalDistribution[µv, σv]

E[X] = exp(µx + σx^2 / 2)
E[V] = exp(µv + σv^2 / 2)
E[1/V] = exp(-µv + σv^2 / 2)
Var(X) = exp(2 µx + σx^2) (exp(σx^2) - 1)

cov(X, T) = Var(X) E[1/V]
          = exp(2 µx + σx^2) (exp(σx^2) - 1) exp(-µv + σv^2 / 2)

cov(T, V) = (1 - E[1/V] E[V]) E[X]
          = (1 - exp(σv^2)) exp(µx + σx^2 / 2)
