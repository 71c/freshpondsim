from poibin import PoiBin
from generalized_binomial_generation import random_bernoulli_vectors, random_bernoulli_vectors_conditional_on_sum
import numpy as np
from tictoc import *
import matplotlib.pyplot as plt
from tqdm import tqdm


def get_poibin_pmf_RF1(p):
    n = len(p)
    A = np.zeros(n + 1, dtype=np.longdouble)
    A[0] = 1.0
    for j in range(0, n):
        for i in range(j+1, -1, -1):
            a_im1 = 0.0 if i == 0 else A[i-1]
            A[i] += (a_im1 - A[i]) * p[j]
    return A


def get_poibin_pmf(p, use_fft=False):
    if use_fft:
        return PoiBin(p).pmf_list
    return get_poibin_pmf_RF1(p)


# p = np.linspace(0.1, 0.9, 80)

p = [4.861271889939229e-08, 5.334148454946581e-08, 5.717353317935176e-08, 7.327919279455899e-08, 7.497959846571822e-08, 7.730366646738853e-08, 7.936035396206215e-08, 8.552957423905137e-08, 8.977726035447817e-08, 1.0102182078368502e-07, 1.0853764084162248e-07, 1.1000073064509236e-07, 1.1457483927337013e-07, 1.192357280905235e-07, 1.21643822785638e-07, 1.403216020052964e-07, 1.5540808984435e-07, 1.5849924498762158e-07, 1.7276877767305944e-07, 1.7772102441517623e-07, 1.98669951172488e-07, 2.306298617279113e-07, 2.3694633676285064e-07, 2.740312620017887e-07, 2.792393305792196e-07, 2.870584727087839e-07, 2.985121572345741e-07, 3.2610552985419136e-07, 3.3455277018998926e-07, 3.4113893434806944e-07, 3.7758383848613007e-07, 3.8525447289580395e-07, 4.048603611572787e-07, 4.1871993989317567e-07, 5.370176758249376e-07, 5.436684886863085e-07, 6.97194840962234e-07, 7.126098045352672e-07, 7.335444630193048e-07, 8.240246431910428e-07, 8.535149220783554e-07, 9.767173981627213e-07, 1.1273202303216276e-06, 1.3096109665019211e-06, 1.3162253312029867e-06, 1.344028941863007e-06, 1.376720729056523e-06, 1.3957043254902832e-06, 1.4630228612388333e-06, 1.468913019738987e-06, 1.6326556503919583e-06, 1.6760831967822292e-06, 1.6967150443953634e-06, 1.7216301058143847e-06, 1.7914011811403132e-06, 1.8769401752196233e-06, 1.9262281337734624e-06, 1.9499566069032047e-06, 1.980477037702143e-06, 2.0523935237038094e-06, 2.1720074308291527e-06, 2.174306761367704e-06, 2.4099531799610032e-06, 2.664323654023e-06, 2.6710294934606263e-06, 2.9424569132175503e-06, 3.0270057834339823e-06, 3.188011544922362e-06, 3.3867517500303128e-06, 3.656768451328201e-06, 3.729547341843141e-06, 4.013705960582234e-06, 4.117325294934531e-06, 4.205969758025123e-06, 4.327015113830764e-06, 4.407725601544771e-06, 4.884361470542715e-06, 5.177000525406674e-06, 6.168558340027351e-06, 6.376586242039916e-06, 6.562305583381987e-06, 6.834762921328124e-06, 7.848951870915183e-06, 7.880765743447086e-06, 8.415458366577304e-06, 8.549539598374479e-06, 8.71838543722209e-06, 8.864580503510463e-06, 9.98922803706633e-06, 1.0004958207426685e-05, 1.003840785779326e-05, 1.031549039135558e-05, 1.0711012682679635e-05, 1.1961688542054701e-05, 1.438017193277798e-05, 1.4708825088373423e-05, 1.4963241496951359e-05, 1.552841592163173e-05, 1.678054060032803e-05, 1.6976961709249686e-05, 1.7008201629719123e-05, 1.8840618399031123e-05, 1.9377608404975418e-05, 2.1674702669523224e-05, 2.225925193869826e-05, 2.331204499171802e-05, 2.6284443302466995e-05, 2.718170617843822e-05, 3.3281702890507275e-05, 3.3642906552235e-05, 3.567797679753887e-05, 4.0676812026335856e-05, 4.377968392626274e-05, 6.644079932884303e-05, 6.664694841587113e-05, 7.02851891914434e-05, 7.746832401702977e-05, 7.858052947912993e-05, 8.108681021939197e-05, 8.992205067641227e-05, 9.271740267335275e-05, 9.553290223188983e-05, 0.00010247406885733822, 0.00010454141685898606, 0.00010742551814923619, 0.00011181874993374848, 0.00011484467995706772, 0.00011535405923959682, 0.00011595863911300295, 0.00011688913834342759, 0.00011977810739492445, 0.00011983973609712664, 0.00014492792882435095, 0.00016409974317452072, 0.00018364930168098475, 0.00018781312650133274, 0.00019700292844612217, 0.00020175259508253146, 0.0002144090101976277, 0.00022728976079143016, 0.00032259760861199456, 0.0003468304943038562, 0.00039141791956130153, 0.0004801653119014621, 0.0004979386627673395, 0.0005508355493501733, 0.0005602436727042939, 0.0005877150057392562, 0.000588824065277768, 0.000593899670962335, 0.0006195263438704887, 0.0006345705654415103, 0.0007080566696122458, 0.0007305080098525514, 0.0007794519213231671, 0.0009378532171218573, 0.000985485054665115, 0.0010079985479177617, 0.0010314530384178044, 0.0010907427481930006, 0.0011714152544034175, 0.001190280260287776, 0.0014668060491440657, 0.0016465728219279597, 0.0017008979322664262, 0.001706032003506535, 0.0018205652390500778, 0.0019693604458649087, 0.002010760940473604, 0.002103565185144341, 0.0021588924076205857, 0.00220453426216618, 0.0023892281992900634, 0.0025311947232979325, 0.002629378496453935, 0.0028769530917982272, 0.0029298006943247576, 0.003117350046675873, 0.0032448707068993537, 0.003433558597613743, 0.003485658320269274, 0.0037692702244865386, 0.003804587988077363, 0.0038943696625881622, 0.004073028282966015, 0.004340228324685987, 0.0046067858380648774, 0.004931066057395018, 0.005485257045975079, 0.00562446097419523, 0.005687720495668345, 0.006344932184483651, 0.006652375745489007, 0.006669098838971407, 0.006705059340846585, 0.007090441851520683, 0.007301149963141413, 0.008806491263231834, 0.00905695794080717, 0.009424097651937243, 0.010315658838222346, 0.010587903861614692, 0.01214828886183542, 0.012400107899785627, 0.013944264589747617, 0.014750733491606155, 0.015795750326136292, 0.016215730432760585, 0.016347570082162505, 0.016430693072102646, 0.01723489262973391, 0.017711867377663663, 0.019331187759666343, 0.019542715312092434, 0.021350296742861978, 0.022180881919008057, 0.023114038937094898, 0.024365476361119458, 0.025047785235261834, 0.02555637427288608, 0.025969178068575825, 0.026410911654757337, 0.026616532360296312, 0.027546893426268895, 0.028253584826606618, 0.028333923426725274, 0.029958096182519992, 0.030706692923885625, 0.03149427660201293, 0.03188360930763619, 0.032661103444811615, 0.03758513586476765, 0.03984121563401259, 0.04083485263005917, 0.04478554133423079, 0.04647439054990731, 0.04940256354380678, 0.049413976480689216, 0.05125800953685243, 0.052410171392797925, 0.05307743962917902, 0.0556575052349206, 0.05637093218397507, 0.05855536756296713, 0.0662322740784764, 0.06914801435164136, 0.07144923338561696, 0.08150446836149222, 0.08341810869103693, 0.08565859814035483, 0.08958107765860279, 0.09027748980442274, 0.092847929730918, 0.09358318346288762, 0.09433450156455901, 0.09653726701016216, 0.09770242617343655, 0.0992998299453151, 0.10142533362622189, 0.10718806479835258, 0.11249370358768611, 0.11310648634417968, 0.1162687582709888, 0.11810259649909757, 0.12561793699156923, 0.1276186165484962, 0.13094711572246, 0.13317774171861738, 0.13416008878683175, 0.15931331205510466, 0.1603485900622054, 0.1929699537270562, 0.19418161282620086, 0.19886981106183046, 0.19900447376720246, 0.20821714949424294, 0.21978775009879267, 0.2207347407091772, 0.22116845691270112, 0.225277359487934, 0.23869095003547733, 0.2432981566828598, 0.24919570843488278, 0.2547914080063927, 0.27320272790107425, 0.2819074102462627, 0.28378609839679797, 0.28524349524479486, 0.29192446698248414, 0.29944226051805944, 0.34168962451422336, 0.34232438298789714, 0.34486264672370626, 0.35220450633360656, 0.36273686107474734, 0.3635752851217309, 0.36591123073811055, 0.3746937236947069, 0.384289490778654, 0.3938011918343336, 0.3962650286279385, 0.3972602859614328, 0.4031314634830416, 0.40452029150608704, 0.40536393909143464, 0.40629712439329957, 0.418618881953424, 0.42299246583273975, 0.42752069403335796, 0.4749109841504715, 0.475189012868678, 0.4768714586945961, 0.4794330940983935, 0.4856197765214468, 0.48876752955148356, 0.49685275308520677, 0.5120430334737126, 0.521668763772715, 0.5328180708431082, 0.5415636645176571, 0.5428604490067408, 0.5435573315843065, 0.5522480841986697, 0.5712937137862821, 0.6000087250714915, 0.6033357067282455, 0.6117286577072475, 0.6146656753772198, 0.6147741607570438, 0.619599283898523, 0.6220356886123316, 0.6491089313603088, 0.6502519971278901, 0.6615513686609129, 0.668855215079503, 0.6730232471516271, 0.6818388020652316, 0.754166232565411, 0.7734453358137939, 0.7847924344919559, 0.8199229698327188, 0.8412002781217791, 0.8434569716163307, 0.8636554950730707, 0.869169390298161, 0.8731015518032913, 0.8739213404038951, 0.9045638873857611, 0.9178986992230516, 0.918109364491479, 0.9195702784324711, 0.9198415380440905, 0.9341373055148252, 0.9471895247212253, 0.9475384676819778, 0.9542487746780419, 0.9568405303771191, 0.9731041211314722, 0.9774306170171574, 0.9866487453212597, 0.9869517306777231, 0.9894408808235945, 0.9963162826137061, 0.9992890999460937, 0.9995484406807423]
# p = np.array(p)#.astype(np.longdouble)

N = len(p)

# print('hi')
# print(get_poibin_pmf(p) - get_poibin_pmf_RF1(p))


# n_samples = 200_000
# samples = random_bernoulli_vectors(p, n=n_samples)
# sums = np.sum(samples, axis=1)
# est_probs = np.empty(N + 1)
# for i in range(N + 1):
#     est_probs[i] = sum(sums == i) / n_samples
# max_err = np.max(np.abs(get_poibin_pmf(p, use_fft=True) - est_probs))
# print('Maximum absolute difference between PoiBin pmf and simulated pmf (FFT):', max_err)
# max_err = np.max(np.abs(get_poibin_pmf(p, use_fft=False) - est_probs))
# print('Maximum absolute difference between PoiBin pmf and simulated pmf (RF1):', max_err)
# print()


def get_bernoulli_probs_conditional_on_sum(probs, use_fft=True):
    '''If X_1,...,X_N are Bernoulli random variables,
    let S = X_1 + ... + X_N be their sum. Suppose you know their sum equals s.
    This function calculates P(X_i = 1 | S = s) for all values i, and for all s.
    This is computed using Bayes' theorem.
    
    Arguments:
        probs: the probabilities of success
    Returns:
        A matrix X with the probabilities explained above.
        Each row corresponds to a different s, and s = 1...N.
        Each column corresponds to i. i = 1...N.
        We have that (with i starting from 1):
                P(X_i=1 | S=s) == X[s-1, i-1].
    '''
    n_rvs = len(probs)
    probs = np.array(probs)
    assert all((0 < probs) & (probs <= 1))

    # P(S = s)
    pmf = get_poibin_pmf(probs, use_fft=use_fft)

    # For all i, this array will contain P(S=s | X_i = 1)
    # Each row corresponds to s. s = 1...N (s cannot be 0; we condition X_i=1)
    # Each column corresponds to i. i = 1...N
    probs_of_sum_given_Xi = np.empty((n_rvs, n_rvs))
    for i in range(n_rvs):
        new_probs = np.concatenate((probs[:i], probs[i+1:]))
        probs_of_sum_given_Xi[:, i] = get_poibin_pmf(new_probs, use_fft=use_fft)

    # return probs_of_sum_given_Xi
    return probs_of_sum_given_Xi * probs / pmf[1:, None]


pmf_fft = get_poibin_pmf(p, use_fft=True)
pmf_RF1 = get_poibin_pmf(p, use_fft=False)

# print(pmf_fft)
# print(pmf_RF1)

# plt.matshow((pmf_RF1 - pmf_fft)[None, :])
# plt.show()

# print(pmf_RF1 - pmf_fft)

print('Maximum abs difference between RF1 and FFT:', np.amax(np.abs(pmf_RF1 - pmf_fft)))


tic('exact calculation of P(X_i=1 | S=s) matrix with FFT')
X_fft = get_bernoulli_probs_conditional_on_sum(p, use_fft=True)
tocl()

tic('exact calculation of P(X_i=1 | S=s) matrix with RF1')
X_RF1 = get_bernoulli_probs_conditional_on_sum(p, use_fft=False)
tocl()


X_approx = np.arange(1, N+1)[:, None] * p / np.sum(p)



# tic('approximate calculation of P(X_i=1 | S=s) matrix by simulation')
# n_rvs = len(p)
# empirical_matrix = np.empty((n_rvs, n_rvs))
# for s in (range(1, n_rvs+1)):
#     samples = random_bernoulli_vectors_conditional_on_sum(p, s=s, n=30_000)
#     empirical_matrix[s-1] = samples.mean(axis=0)
# tocl()
# max_err = np.max(np.abs(X_RF1 - empirical_matrix))
# print('Maximum absolute difference between PoiBin vs simulated P(X_i=1 | S=s):', max_err)

# print()

# # print('P(X_i=1):')
# # print(p)

# print('P(X_i=1 | S=s):')
# # print(X)
# # # print(np.amax(X))



# print(X_RF1)
# print(X_fft)

print('Max val FFT:', np.amax(X_RF1))
print('Max val RF1:', np.amax(X_fft))


plt.matshow(X_RF1)
plt.xlabel('the value of i')
plt.ylabel('the value of s')
plt.title('P(X_i=1 | S=s), RF1')

plt.matshow(X_fft)
plt.xlabel('the value of i')
plt.ylabel('the value of s')
plt.title('P(X_i=1 | S=s), FFT')

# plt.matshow(X_approx)
# plt.xlabel('the value of i')
# plt.ylabel('the value of s')
# plt.title('P(X_i=1 | S=s), approximation')

plt.show()

# plt.matshow(X_RF1 - X_fft)
# plt.matshow(X_fft)
# plt.xlabel('the value of i')
# plt.ylabel('the value of s')
# plt.show()

